- id: cleanup-defaults
  structure:
    modules:
      a.py: |
        from cellophane import runner

        @runner()
        def runner(**_):
            ...

    samples.yaml: |
      - id: a
        files:
        - input/a.txt
    input:
      a.txt: "INPUT_A"
  args:
    --samples_file: samples.yaml
    --workdir: out
    --tag: DUMMY
  logs:
  - Removing out/DUMMY

- id: cleanup-unregister
  structure:
    modules:
      a.py: |
        from cellophane import runner

        @runner()
        def r(workdir, cleaner, **_):
            (workdir / "a" / "b" / "c").mkdir(parents=True)
            (workdir / "a" / "x.txt").touch()
            (workdir / "a" / "b" / "y.txt").touch()
            (workdir / "a" / "b" / "c" / "z.txt").touch()
            (workdir / "a" / "d" / "e" / "f").mkdir(parents=True)
            (workdir / "a" / "d" / "e" / "k.txt").touch()
            (workdir / "foo").mkdir(parents=True)
            (workdir / "foo" / "bar.txt").touch()
            cleaner.unregister(workdir / "a" / "b" / "c" / "z.txt")
            cleaner.unregister("foo/bar.txt")

    samples.yaml: |
      - id: a
        files:
        - input/a.txt
    input:
      a.txt: "INPUT_A"
  args:
    --samples_file: samples.yaml
    --workdir: out
    --tag: DUMMY
  logs:
  - Removing out/DUMMY/r/a/b/y.txt
  - Removing out/DUMMY/r/a/x.txt
  - Removing out/DUMMY/r/a/d


- id: cleanup-deferred-non-root
  structure:
    modules:
      a.py: |
        from cellophane import runner

        @runner()
        def a(workdir, cleaner, **_):
            cleaner.register("/tmp/NON_ROOT")
            cleaner.register("/tmp/ALSO_NON_ROOT", ignore_outside_root=True)

    samples.yaml: |
      - id: a
        files:
        - input/a.txt
    input:
      a.txt: "INPUT_A"
  args:
    --samples_file: samples.yaml
    --workdir: out
    --tag: DUMMY
  logs:
  - Deferred cleaner does not support registering paths outside the root directory
  - NON_ROOT outside out/DUMMY
  - Removing out/DUMMY

- id: cleanup-non-root
  structure:
    modules:
      a.py: |
        from cellophane import runner, pre_hook

        @runner()
        def a(**_):
            ...

        @pre_hook()
        def h(cleaner,workdir, **_):
            cleaner.register("/tmp/NON_ROOT")
            cleaner.unregister("/tmp/NON_ROOT")
            abs_parent = workdir.parent.absolute()
            (abs_parent / "EXISTS").touch()
            cleaner.register(abs_parent / "EXISTS", ignore_outside_root=True)
            cleaner.register(abs_parent / "DOES_NOT_EXIST", ignore_outside_root=True)

    samples.yaml: |
      - id: a
        files:
        - input/a.txt
    input:
      a.txt: "INPUT_A"
  args:
    --samples_file: samples.yaml
    --workdir: out
    --tag: DUMMY
  logs:
  - NON_ROOT outside out/DUMMY
  - Cleaning up 2 files and 1 directory
  - Removing 2 paths outside out/DUMMY
  - out/DOES_NOT_EXIST does not exist
  - Removing out/DUMMY
  - Removing path outside out/DUMMY

- id: cleanup-deferred-clean
  structure:
    modules:
      a.py: |
        from cellophane import runner

        @runner()
        def runner(cleaner, **_):
            cleaner.clean()

    samples.yaml: |
      - id: a
        files:
        - input/a.txt
    input:
      a.txt: "INPUT_A"
  args:
    --samples_file: samples.yaml
    --workdir: out
    --tag: DUMMY
  logs:
  - Deferred cleaner does not support cleaning

- id: cleanup-removal-exception
  structure:
    modules:
      a.py: |
        from cellophane import runner

        @runner()
        def runner(cleaner, **_):
            ...

    samples.yaml: |
      - id: a
        files:
        - input/a.txt
    input:
      a.txt: "INPUT_A"
  mocks:
    cellophane.cleanup.cleanup.rmtree:
      side_effect: !!python/object/new:Exception ["DUMMY"]
  args:
    --samples_file: samples.yaml
    --workdir: out
    --tag: DUMMY
  logs:
  - "out/DUMMY: Exception('DUMMY')"

- id: cleanup-deferred-invalid-call
  structure:
    modules:
      a.py: |
        from cellophane import runner
        from cellophane.cleanup import DeferredCall

        @runner()
        def runner(cleaner, workdir, **_):
            cleaner.calls.append(DeferredCall("DUMMY", workdir / "DUMMY"))
            ...

    samples.yaml: |
      - id: a
        files:
        - input/a.txt
    input:
      a.txt: "INPUT_A"
  args:
    --samples_file: samples.yaml
    --workdir: out
    --tag: DUMMY
  logs:
  - "Unhandled exception when collecting results: ValueError('Invalid action: DUMMY')"
